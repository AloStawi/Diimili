import asyncio
import youtube_dl
import pafy
import discord
from discord.ext import commands

intents = discord.Intents.default()
intents.members = True


class Player(commands.Cog):
    def __init__(self, bot):
        self.bot = bot 
        self.song_queue = {}

        self.setup()

    def setup(self):
        for guild in self.bot.guilds:
            self.song_queue[guild.id] = []

    async def check_queue(self, ctx):
        if len(self.song_queue[ctx.guild.id]) > 0:
            ctx.voice_client.stop()
            await self.play_song(ctx, self.song_queue[ctx.guild.id][0])
            self.song_queue[ctx.guild.id].pop(0)

    async def search_song(self, amount, song, get_url=False):
        info = await self.bot.loop.run_in_executor(None, lambda: youtube_dl.YoutubeDL({"format" : "bestaudio", "quiet" : True}).extract_info(f"ytsearch{amount}:{song}", download=False, ie_key="YoutubeSearch"))
        if len(info["entries"]) == 0: return None

        return [entry["webpage_url"] for entry in info["entries"]] if get_url else info

    async def play_song(self, ctx, song):
        url = pafy.new(song).getbestaudio().url
        ctx.voice_client.play(discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(url)), after=lambda error: self.bot.loop.create_task(self.check_queue(ctx)))
        ctx.voice_client.source.volume = 0.5

    @commands.command()
    async def leave(self, ctx):
        if ctx.voice_client is not None:
            return await ctx.voice_client.disconnect()

        await ctx.send("Eu n√£o estou conectada em um canal de voz.")

    @commands.command()
    async def play(self, ctx, *, song=None):
        if song is None:
            return await ctx.send("Voc√™ precisa me falar uma m√∫sica para que eu consiga toc√°-la!")

        if ctx.voice_client is None:
            if ctx.author.voice is None:
                return await ctx.send("Voc√™ n√£o est√° em nenhum canal de voz... Por favor, conecte-se em um canal de voz.")

            else:
              await ctx.author.voice.channel.connect()

        # handle song where song isn't url
        if not ("youtube.com/watch?" in song or "https://youtu.be/" in song):
            await ctx.send("üîé Procurando pela sua m√∫sica, espere um pouquinho.")

            result = await self.search_song(1, song, get_url=True)

            if result is None:
                return await ctx.send("Desculpe, eu n√£o consegui encontrar a m√∫sica que voc√™ queria. Tente usar o comando de busca.")

            song = result[0]

        if ctx.voice_client.source is not None:
            queue_len = len(self.song_queue[ctx.guild.id])

            if queue_len < 10:
                self.song_queue[ctx.guild.id].append(song)
                return await ctx.send(f"Eu j√° estou tocando uma m√∫sica no momento, a sua m√∫sica foi adicionada na fila na posi√ß√£o: {queue_len+1}.")

            else:
                return await ctx.send("Desculpa, eu s√≥ consigo 10 m√∫sicas por vez (meus pais precisam dar um jeito de arrumar minha mem√≥ria), por favor espere essa m√∫sica acabar para colocar outra na fila.")

        await self.play_song(ctx, song)
        await ctx.send(f"Tocando: {song}")

    @commands.command()
    async def search(self, ctx, *, song=None):
        if song is None: return await ctx.send("Voc√™ esqueceu de colocar alguma m√∫sica para eu procurar.")

        await ctx.send("üîé Procurando pela m√∫sica, espere um pouquinho...")

        info = await self.search_song(5, song)

        embed = discord.Embed(title=f"Resultados para '{song}':", description="*Voc√™ pode usar esses links caso a m√∫sica que voc√™ queria n√£o seja a primeira.*\n\n", colour=10592204)
        
        amount = 0
        for entry in info["entries"]:
            embed.description += f"[{entry['title']}]({entry['webpage_url']})\n"
            amount += 1

        embed.set_footer(text=f"Mostrando os primeiros {amount} resultados.")
        await ctx.send(embed=embed)

    @commands.command()
    async def queue(self, ctx): # display the current guilds queue
        if len(self.song_queue[ctx.guild.id]) == 0:
            return await ctx.send("N√£o tem nenhuma m√∫sica na fila.")

        embed = discord.Embed(title="Lista de m√∫sicas", description="", colour=10592204)
        i = 1
        for url in self.song_queue[ctx.guild.id]:
            embed.description += f"{i}) {url}\n"
          
            i += 1

        await ctx.send(embed=embed)


    @commands.command()
    async def clear(self, ctx):
        if len(self.song_queue[ctx.guild.id]) > 0:
            self.song_queue[ctx.guild.id].clear()
            await ctx.send("A fila agora est√° vazia!")
        
        else:
          await ctx.send("A fila j√° estava vazia...")

    @commands.command()
    async def skip(self, ctx):
      ctx.voice_client.stop()
      await self.check_queue(ctx)


    @commands.command()
    async def pause(self, ctx):
        if ctx.voice_client.is_paused():
            return await ctx.send("A m√∫sica j√° est√° pausada.")

        ctx.voice_client.pause()
        await ctx.send("A m√∫sica foi pausada.")

    @commands.command()
    async def resume(self, ctx):
        if ctx.voice_client is None:
            return await ctx.send("Eu n√£o estou conectada em nenhum canal de voz :/")

        if not ctx.voice_client.is_paused():
            return await ctx.send("Eu j√° estou tocando uma m√∫sica")
        
        ctx.voice_client.resume()
        await ctx.send("A m√∫sica voltou a ser tocada")